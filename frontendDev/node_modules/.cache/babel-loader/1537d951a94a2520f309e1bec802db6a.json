{"ast":null,"code":"import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\nexport async function getContacts(query) {\n  await fakeNetwork(`getContacts:${query}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  if (!contacts) contacts = [];\n\n  if (query) {\n    contacts = matchSorter(contacts, query, {\n      keys: [\"first\", \"last\"]\n    });\n  }\n\n  return contacts.sort(sortBy(\"last\", \"createdAt\"));\n}\nexport async function createContact() {\n  await fakeNetwork();\n  let id = Math.random().toString(36).substring(2, 9);\n  let contact = {\n    id,\n    createdAt: Date.now()\n  };\n  let contacts = await getContacts();\n  contacts.unshift(contact);\n  await set(contacts);\n  return contact;\n}\nexport async function getContact(id) {\n  await fakeNetwork(`contact:${id}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  return contact !== null && contact !== void 0 ? contact : null;\n}\nexport async function updateContact(id, updates) {\n  await fakeNetwork();\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  if (!contact) throw new Error(\"No contact found for\", id);\n  Object.assign(contact, updates);\n  await set(contacts);\n  return contact;\n}\nexport async function deleteContact(id) {\n  let contacts = await localforage.getItem(\"contacts\");\n  let index = contacts.findIndex(contact => contact.id === id);\n\n  if (index > -1) {\n    contacts.splice(index, 1);\n    await set(contacts);\n    return true;\n  }\n\n  return false;\n}\n\nfunction set(contacts) {\n  return localforage.setItem(\"contacts\", contacts);\n} // fake a cache so we don't slow down stuff we've already seen\n\n\nlet fakeCache = {};\n\nasync function fakeNetwork(key) {\n  if (!key) {\n    fakeCache = {};\n  }\n\n  if (fakeCache[key]) {\n    return;\n  }\n\n  fakeCache[key] = true;\n  return new Promise(res => {\n    setTimeout(res, Math.random() * 800);\n  });\n}","map":{"version":3,"names":["localforage","matchSorter","sortBy","getContacts","query","fakeNetwork","contacts","getItem","keys","sort","createContact","id","Math","random","toString","substring","contact","createdAt","Date","now","unshift","set","getContact","find","updateContact","updates","Error","Object","assign","deleteContact","index","findIndex","splice","setItem","fakeCache","key","Promise","res","setTimeout"],"sources":["/home/setefi/RAS/ex_1/src/contacts.js"],"sourcesContent":["import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\n\nexport async function getContacts(query) {\n  await fakeNetwork(`getContacts:${query}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  if (!contacts) contacts = [];\n  if (query) {\n    contacts = matchSorter(contacts, query, { keys: [\"first\", \"last\"] });\n  }\n  return contacts.sort(sortBy(\"last\", \"createdAt\"));\n}\n\nexport async function createContact() {\n  await fakeNetwork();\n  let id = Math.random().toString(36).substring(2, 9);\n  let contact = { id, createdAt: Date.now() };\n  let contacts = await getContacts();\n  contacts.unshift(contact);\n  await set(contacts);\n  return contact;\n}\n\nexport async function getContact(id) {\n  await fakeNetwork(`contact:${id}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  return contact ?? null;\n}\n\nexport async function updateContact(id, updates) {\n  await fakeNetwork();\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  if (!contact) throw new Error(\"No contact found for\", id);\n  Object.assign(contact, updates);\n  await set(contacts);\n  return contact;\n}\n\nexport async function deleteContact(id) {\n  let contacts = await localforage.getItem(\"contacts\");\n  let index = contacts.findIndex(contact => contact.id === id);\n  if (index > -1) {\n    contacts.splice(index, 1);\n    await set(contacts);\n    return true;\n  }\n  return false;\n}\n\nfunction set(contacts) {\n  return localforage.setItem(\"contacts\", contacts);\n}\n\n// fake a cache so we don't slow down stuff we've already seen\nlet fakeCache = {};\n\nasync function fakeNetwork(key) {\n  if (!key) {\n    fakeCache = {};\n  }\n\n  if (fakeCache[key]) {\n    return;\n  }\n\n  fakeCache[key] = true;\n  return new Promise(res => {\n    setTimeout(res, Math.random() * 800);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}